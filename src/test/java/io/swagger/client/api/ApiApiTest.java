/**
 * RackHD 2.0
 * 
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.UserObj;
import io.swagger.client.model.VersionsResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.GenericObj;
import java.io.File;
import io.swagger.client.model.Action;
import io.swagger.client.model.Lease;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiApi
 */
public class ApiApiTest {

    private final ApiApi api = new ApiApi();

    
    /**
     * Add a new user 
     *
     * Add a new user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        UserObj body = null;
        // Object response = api.addUser(body);

        // TODO: test validations
    }
    
    /**
     * get list of all catalogs 
     *
     * The catalogs endpoint returns json data that represent the catalogs of all hardware in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogsGetTest() throws ApiException {
        String query = null;
        // VersionsResponse response = api.catalogsGet(query);

        // TODO: test validations
    }
    
    /**
     * get list of all catalogs 
     *
     * The catalogs endpoint returns json data that represent the catalogs of all hardware in the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogsIdGetTest() throws ApiException {
        String identifier = null;
        // VersionsResponse response = api.catalogsIdGet(identifier);

        // TODO: test validations
    }
    
    /**
     * get server configuration 
     *
     * Get server configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configGetTest() throws ApiException {
        // Object response = api.configGet();

        // TODO: test validations
    }
    
    /**
     * patch/update server configuration 
     *
     * Patch/update server configuration and then return the patched configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configPatchTest() throws ApiException {
        GenericObj config = null;
        // Object response = api.configPatch(config);

        // TODO: test validations
    }
    
    /**
     * Create a new tag
     *
     * Create a new tag 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        GenericObj body = null;
        // Object response = api.createTag(body);

        // TODO: test validations
    }
    
    /**
     * Delete the specified tag
     *
     * Delete the specified tag 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        String tagName = null;
        // Object response = api.deleteTag(tagName);

        // TODO: test validations
    }
    
    /**
     * delete file based on uuid 
     *
     * Delete a file based on uuid. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesDeleteTest() throws ApiException {
        String fileidentifier = null;
        // api.filesDelete(fileidentifier);

        // TODO: test validations
    }
    
    /**
     * get file based on uuid or file name 
     *
     * Get file based on uuid or file name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesGetTest() throws ApiException {
        String fileidentifier = null;
        // File response = api.filesGet(fileidentifier);

        // TODO: test validations
    }
    
    /**
     * get all available files 
     *
     * Get all available files 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesGetAllTest() throws ApiException {
        // Object response = api.filesGetAll();

        // TODO: test validations
    }
    
    /**
     * get md5sum based on file name 
     *
     * Get md5sum based on file name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesMd5GetTest() throws ApiException {
        String filename = null;
        // Object response = api.filesMd5Get(filename);

        // TODO: test validations
    }
    
    /**
     * get file metadata by file name 
     *
     * Get file metadata by file name 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesMetadataGetTest() throws ApiException {
        String filename = null;
        // Object response = api.filesMetadataGet(filename);

        // TODO: test validations
    }
    
    /**
     * put file based on filename 
     *
     * Put file based on filename, returns the uuid of the stored file. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filesPutTest() throws ApiException {
        String fileidentifier = null;
        // String response = api.filesPut(fileidentifier);

        // TODO: test validations
    }
    
    /**
     * Retrieve information about all tags
     *
     * Retrieve information about all tags 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTagsTest() throws ApiException {
        // List<Object> response = api.getAllTags();

        // TODO: test validations
    }
    
    /**
     * get tasks bootstrap.js 
     *
     * used internally by the system - get tasks bootstrap.js 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBootstrapTest() throws ApiException {
        String macAddress = null;
        // VersionsResponse response = api.getBootstrap(macAddress);

        // TODO: test validations
    }
    
    /**
     * Retrieve nodes with the specified tag
     *
     * Retrieve nodes with the specified tag 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodesByTagTest() throws ApiException {
        String tagName = null;
        // List<Object> response = api.getNodesByTag(tagName);

        // TODO: test validations
    }
    
    /**
     * Retrieve information about the tag
     *
     * Retrieve information about the tag 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        String tagName = null;
        // Object response = api.getTag(tagName);

        // TODO: test validations
    }
    
    /**
     * get specific task 
     *
     * get specific task 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTasksByIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.getTasksById(identifier);

        // TODO: test validations
    }
    
    /**
     * Get information about a user 
     *
     * Get information about a user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String name = null;
        // UserObj response = api.getUser(name);

        // TODO: test validations
    }
    
    /**
     * Retrieve a list of users 
     *
     * Retrieve a list of users 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        // List<UserObj> response = api.listUsers();

        // TODO: test validations
    }
    
    /**
     * Delete specified lookup details. 
     *
     * Delete specified lookup details. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsDelByIdTest() throws ApiException {
        String id = null;
        // api.lookupsDelById(id);

        // TODO: test validations
    }
    
    /**
     * find all 
     *
     * find all 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGetTest() throws ApiException {
        String q = null;
        // List<Object> response = api.lookupsGet(q);

        // TODO: test validations
    }
    
    /**
     * lookup id 
     *
     * lookup id 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsGetByIdTest() throws ApiException {
        String id = null;
        // List<Object> response = api.lookupsGetById(id);

        // TODO: test validations
    }
    
    /**
     * Patch specified lookup record 
     *
     * Patch specified lookup record 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsPatchByIdTest() throws ApiException {
        String id = null;
        GenericObj body = null;
        // Object response = api.lookupsPatchById(id, body);

        // TODO: test validations
    }
    
    /**
     * find all 
     *
     * put all 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupsPostTest() throws ApiException {
        GenericObj body = null;
        // Object response = api.lookupsPost(body);

        // TODO: test validations
    }
    
    /**
     * Update properties on a user 
     *
     * Update properties on a user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyUserTest() throws ApiException {
        String name = null;
        UserObj body = null;
        // Object response = api.modifyUser(name, body);

        // TODO: test validations
    }
    
    /**
     * Delete specified node. 
     *
     * Delete specified node. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesDelByIdTest() throws ApiException {
        String identifier = null;
        // api.nodesDelById(identifier);

        // TODO: test validations
    }
    
    /**
     * Delete a tag from the specified node. 
     *
     * Delete a tag from the specified node. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesDelTagByIdTest() throws ApiException {
        String identifier = null;
        String tagName = null;
        // api.nodesDelTagById(identifier, tagName);

        // TODO: test validations
    }
    
    /**
     * List of all nodes or if there are none an empty object 
     *
     * List of all nodes or if there are none an empty object 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesGetAllTest() throws ApiException {
        // List<Object> response = api.nodesGetAll();

        // TODO: test validations
    }
    
    /**
     * List of all nodes or if there are none an empty object 
     *
     * List of all nodes or if there are none an empty object 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesGetByIdTest() throws ApiException {
        String identifier = null;
        // List<Object> response = api.nodesGetById(identifier);

        // TODO: test validations
    }
    
    /**
     * Fetch catalog of specified node 
     *
     * Fetch catalog of specified node 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesGetCatalogByIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.nodesGetCatalogById(identifier);

        // TODO: test validations
    }
    
    /**
     * Fetch catalog of specified node for given source 
     *
     * Fetch catalog of specified node for given source 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesGetCatalogSourceByIdTest() throws ApiException {
        String identifier = null;
        String source = null;
        // Object response = api.nodesGetCatalogSourceById(identifier, source);

        // TODO: test validations
    }
    
    /**
     * Fetch all pollers for specified node 
     *
     * Fetch all pollers for specified node 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesGetPollersByIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.nodesGetPollersById(identifier);

        // TODO: test validations
    }
    
    /**
     * get the ssh settings associated with a node. 
     *
     * get the ssh settings associated with a node. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesGetSshByIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.nodesGetSshById(identifier);

        // TODO: test validations
    }
    
    /**
     * List of all tags on the node or an empty object if there are none 
     *
     * List of all tags on the node or an empty object if there are none 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesGetTagsByIdTest() throws ApiException {
        String identifier = null;
        // List<Object> response = api.nodesGetTagsById(identifier);

        // TODO: test validations
    }
    
    /**
     * Fetch all workflows for specified node 
     *
     * Fetch all workflows for specified node 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesGetWorkflowByIdTest() throws ApiException {
        String identifier = null;
        Boolean active = null;
        // Object response = api.nodesGetWorkflowById(identifier, active);

        // TODO: test validations
    }
    
    /**
     * Delete specified tag from all nodes. 
     *
     * Delete specified tag from all nodes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesMasterDelTagByIdTest() throws ApiException {
        String tagName = null;
        // api.nodesMasterDelTagById(tagName);

        // TODO: test validations
    }
    
    /**
     * Patch specified node 
     *
     * Patch specified node 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesPatchByIdTest() throws ApiException {
        String identifier = null;
        GenericObj body = null;
        // Object response = api.nodesPatchById(identifier, body);

        // TODO: test validations
    }
    
    /**
     * Patch tags onto specified node 
     *
     * Patch tags onto specified node 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesPatchTagByIdTest() throws ApiException {
        String identifier = null;
        GenericObj body = null;
        // Object response = api.nodesPatchTagById(identifier, body);

        // TODO: test validations
    }
    
    /**
     * post 
     *
     * post 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesPostTest() throws ApiException {
        GenericObj identifiers = null;
        // Object response = api.nodesPost(identifiers);

        // TODO: test validations
    }
    
    /**
     * set the ssh settings associated with a node. 
     *
     * set the ssh settings associated with a node. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesPostSshByIdTest() throws ApiException {
        String identifier = null;
        GenericObj body = null;
        // api.nodesPostSshById(identifier, body);

        // TODO: test validations
    }
    
    /**
     * create workflow for specified node 
     *
     * create workflow for specified node 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesPostWorkflowByIdTest() throws ApiException {
        String identifier = null;
        GenericObj body = null;
        String name = null;
        // Object response = api.nodesPostWorkflowById(identifier, body, name);

        // TODO: test validations
    }
    
    /**
     * Cancel currently running workflows for specified node 
     *
     * Cancel currently running workflows for specified node 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nodesWorkflowActionByIdTest() throws ApiException {
        String identifier = null;
        Action action = null;
        // Object response = api.nodesWorkflowActionById(identifier, action);

        // TODO: test validations
    }
    
    /**
     * Get list of possible OBM services 
     *
     * Get list of possible OBM services 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obmsDefinitionsGetAllTest() throws ApiException {
        // Object response = api.obmsDefinitionsGetAll();

        // TODO: test validations
    }
    
    /**
     * Get the specified OBM service definition 
     *
     * Get the specified OBM service definition 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obmsDefinitionsGetByNameTest() throws ApiException {
        String name = null;
        // Object response = api.obmsDefinitionsGetByName(name);

        // TODO: test validations
    }
    
    /**
     * Delete the OBM service with the specified identifier 
     *
     * Delete the OBM service with the specified identifier 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obmsDeleteByIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.obmsDeleteById(identifier);

        // TODO: test validations
    }
    
    /**
     * Get list of all OBM service instances 
     *
     * Get list of all OBM service instances 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obmsGetTest() throws ApiException {
        String query = null;
        // Object response = api.obmsGet(query);

        // TODO: test validations
    }
    
    /**
     * get the specified OBM service 
     *
     * get the specified OBM service 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obmsGetByIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.obmsGetById(identifier);

        // TODO: test validations
    }
    
    /**
     * patch a single OBM service 
     *
     * patch a single OBM service 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obmsPatchByIdTest() throws ApiException {
        String identifier = null;
        GenericObj body = null;
        // Object response = api.obmsPatchById(identifier, body);

        // TODO: test validations
    }
    
    /**
     * Enable or disable identify light on node through OBM (if supported) 
     *
     * Enable or disable identify light on node through OBM (if supported) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obmsPostLedTest() throws ApiException {
        GenericObj body = null;
        // api.obmsPostLed(body);

        // TODO: test validations
    }
    
    /**
     * create or update a single OBM service 
     *
     * create or update a single OBM service 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void obmsPutTest() throws ApiException {
        GenericObj body = null;
        // Object response = api.obmsPut(body);

        // TODO: test validations
    }
    
    /**
     * Get latest data for the specific poller 
     *
     * Get latest data for the specific poller 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersCurrentDataGetTest() throws ApiException {
        String identifier = null;
        // Object response = api.pollersCurrentDataGet(identifier);

        // TODO: test validations
    }
    
    /**
     * Get data for the specific poller 
     *
     * Get data for the specific poller 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersDataGetTest() throws ApiException {
        String identifier = null;
        // Object response = api.pollersDataGet(identifier);

        // TODO: test validations
    }
    
    /**
     * delete the specified poller 
     *
     * delete the specified poller 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersDeleteTest() throws ApiException {
        String identifier = null;
        // api.pollersDelete(identifier);

        // TODO: test validations
    }
    
    /**
     * get list of all pollers 
     *
     * get list of all pollers 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersGetTest() throws ApiException {
        // Object response = api.pollersGet();

        // TODO: test validations
    }
    
    /**
     * Get specifics of the specified poller 
     *
     * Get specifics of the specified poller 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersIdGetTest() throws ApiException {
        String identifier = null;
        // Object response = api.pollersIdGet(identifier);

        // TODO: test validations
    }
    
    /**
     * get a single library poller 
     *
     * get a single library poller 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersLibByIdGetTest() throws ApiException {
        String identifier = null;
        // Object response = api.pollersLibByIdGet(identifier);

        // TODO: test validations
    }
    
    /**
     * get list of possible library pollers 
     *
     * get list of possible library pollers 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersLibGetTest() throws ApiException {
        // Object response = api.pollersLibGet();

        // TODO: test validations
    }
    
    /**
     * patch specifics of the specified poller 
     *
     * patch specifics of the specified poller 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersPatchTest() throws ApiException {
        String identifier = null;
        GenericObj content = null;
        // Object response = api.pollersPatch(identifier, content);

        // TODO: test validations
    }
    
    /**
     * create a poller 
     *
     * create a poller 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pollersPostTest() throws ApiException {
        GenericObj content = null;
        // Object response = api.pollersPost(content);

        // TODO: test validations
    }
    
    /**
     * post specific task 
     *
     * post specific task 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTaskByIdTest() throws ApiException {
        String identifier = null;
        GenericObj body = null;
        // Object response = api.postTaskById(identifier, body);

        // TODO: test validations
    }
    
    /**
     * create workflow for nodes with the specified tag 
     *
     * create workflow for nodes with the specified tag 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postWorkflowByIdTest() throws ApiException {
        String tagName = null;
        GenericObj body = null;
        String name = null;
        // Object response = api.postWorkflowById(tagName, body, name);

        // TODO: test validations
    }
    
    /**
     * get list of possible profiles 
     *
     * get list of possible profiles 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesGetTest() throws ApiException {
        List<String> macs = null;
        String mac = null;
        String ip = null;
        // Object response = api.profilesGet(macs, mac, ip);

        // TODO: test validations
    }
    
    /**
     * get a single profile&#39;s raw data 
     *
     * get a single profile&#39;s raw data 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesGetLibByNameTest() throws ApiException {
        String name = null;
        String scope = null;
        // Object response = api.profilesGetLibByName(name, scope);

        // TODO: test validations
    }
    
    /**
     * get list of possible profiles from database 
     *
     * get list of possible profiles from database 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesGetMetadataTest() throws ApiException {
        // Object response = api.profilesGetMetadata();

        // TODO: test validations
    }
    
    /**
     * get a single profile&#39;s metadata from database 
     *
     * get a single profile&#39;s metadata from database 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesGetMetadataByNameTest() throws ApiException {
        String name = null;
        String scope = null;
        // Object response = api.profilesGetMetadataByName(name, scope);

        // TODO: test validations
    }
    
    /**
     * get a single profile 
     *
     * get a single profile 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesGetSwitchVendorTest() throws ApiException {
        String vendor = null;
        // Object response = api.profilesGetSwitchVendor(vendor);

        // TODO: test validations
    }
    
    /**
     * create a switch error 
     *
     * create a switch error 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesPostSwitchErrorTest() throws ApiException {
        GenericObj body = null;
        // Object response = api.profilesPostSwitchError(body);

        // TODO: test validations
    }
    
    /**
     * put a single profile 
     *
     * put a single profile 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesPutLibByNameTest() throws ApiException {
        String name = null;
        String scope = null;
        // Object response = api.profilesPutLibByName(name, scope);

        // TODO: test validations
    }
    
    /**
     * Delete a user 
     *
     * Delete a user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUserTest() throws ApiException {
        String name = null;
        // api.removeUser(name);

        // TODO: test validations
    }
    
    /**
     * get list of all schemas 
     *
     * Get a list of all schemas. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schemasGetTest() throws ApiException {
        // Object response = api.schemasGet();

        // TODO: test validations
    }
    
    /**
     * get a schema by specifying its identifier 
     *
     * Gets a schema by identifier. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schemasIdGetTest() throws ApiException {
        String identifier = null;
        // Object response = api.schemasIdGet(identifier);

        // TODO: test validations
    }
    
    /**
     * get list of skus 
     *
     * get list of skus 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skuPackPostTest() throws ApiException {
        // Object response = api.skuPackPost();

        // TODO: test validations
    }
    
    /**
     * get list of skus 
     *
     * get list of skus 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusGetTest() throws ApiException {
        String query = null;
        // Object response = api.skusGet(query);

        // TODO: test validations
    }
    
    /**
     * Delete specific sku. 
     *
     * Delete specific sku. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusIdDeleteTest() throws ApiException {
        String identifier = null;
        // Object response = api.skusIdDelete(identifier);

        // TODO: test validations
    }
    
    /**
     * Delete a pack for a specific sku 
     *
     * Delete a pack for a specific sku. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusIdDeletePackTest() throws ApiException {
        String identifier = null;
        // Object response = api.skusIdDeletePack(identifier);

        // TODO: test validations
    }
    
    /**
     * get a single sku 
     *
     * get a single sku 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusIdGetTest() throws ApiException {
        String identifier = null;
        // Object response = api.skusIdGet(identifier);

        // TODO: test validations
    }
    
    /**
     * get nodes for specific sku 
     *
     * get nodes for specific sku 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusIdGetNodesTest() throws ApiException {
        String identifier = null;
        // Object response = api.skusIdGetNodes(identifier);

        // TODO: test validations
    }
    
    /**
     * put a sku pack to specific sku 
     *
     * put a sku pack to specific sku 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusIdPutPackTest() throws ApiException {
        String identifier = null;
        // Object response = api.skusIdPutPack(identifier);

        // TODO: test validations
    }
    
    /**
     * patch a single sku 
     *
     * patch a single sku 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusPatchTest() throws ApiException {
        String identifier = null;
        GenericObj body = null;
        // Object response = api.skusPatch(identifier, body);

        // TODO: test validations
    }
    
    /**
     * create a sku 
     *
     * create a sku 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusPostTest() throws ApiException {
        GenericObj body = null;
        // Object response = api.skusPost(body);

        // TODO: test validations
    }
    
    /**
     * create or update a sku 
     *
     * create or update a sku 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skusPutTest() throws ApiException {
        GenericObj body = null;
        // Object response = api.skusPut(body);

        // TODO: test validations
    }
    
    /**
     * get a single template 
     *
     * get a single template 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesGetByNameTest() throws ApiException {
        String name = null;
        // Object response = api.templatesGetByName(name);

        // TODO: test validations
    }
    
    /**
     * delete a single template 
     *
     * delete a single template 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesLibDeleteTest() throws ApiException {
        String name = null;
        String scope = null;
        // api.templatesLibDelete(name, scope);

        // TODO: test validations
    }
    
    /**
     * get a single template 
     *
     * get a single template 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesLibGetTest() throws ApiException {
        String name = null;
        String scope = null;
        // Object response = api.templatesLibGet(name, scope);

        // TODO: test validations
    }
    
    /**
     * put a single template 
     *
     * put a single template 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesLibPutTest() throws ApiException {
        String name = null;
        String scope = null;
        // Object response = api.templatesLibPut(name, scope);

        // TODO: test validations
    }
    
    /**
     * get list of metadata for all templates 
     *
     * get list of metadata for all templates 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesMetaGetTest() throws ApiException {
        // Object response = api.templatesMetaGet();

        // TODO: test validations
    }
    
    /**
     * get metadata for a specific template 
     *
     * get metadata for a specific template 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templatesMetaGetByNameTest() throws ApiException {
        String name = null;
        String scope = null;
        // Object response = api.templatesMetaGetByName(name, scope);

        // TODO: test validations
    }
    
    /**
     * get DHCP lease table 
     *
     * Fetch the dhcp leases. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unimplementedTest() throws ApiException {
        // List<Lease> response = api.unimplemented();

        // TODO: test validations
    }
    
    /**
     * fetch lease information for the mac specified 
     *
     * Fetch lease information for the mac specified. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unimplemented_0Test() throws ApiException {
        String mac = null;
        // List<Lease> response = api.unimplemented_0(mac);

        // TODO: test validations
    }
    
    /**
     * get list of all catalogs
     *
     * Delete the lease for the mac specified and return information about deleted lease. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unimplemented_1Test() throws ApiException {
        String mac = null;
        // List<Lease> response = api.unimplemented_1(mac);

        // TODO: test validations
    }
    
    /**
     * Fetch status of identify light on node through OBM (if supported) 
     *
     * Fetch status of identify light on node through OBM (if supported) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unimplemented_2Test() throws ApiException {
        GenericObj body = null;
        // Object response = api.unimplemented_2(body);

        // TODO: test validations
    }
    
    /**
     * put a single view 
     *
     * put a single view 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsDeleteTest() throws ApiException {
        String identifier = null;
        // Object response = api.viewsDelete(identifier);

        // TODO: test validations
    }
    
    /**
     * get all views 
     *
     * get all views 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsGetTest() throws ApiException {
        // Object response = api.viewsGet();

        // TODO: test validations
    }
    
    /**
     * get view with specified identifier 
     *
     * get view with specified identifier 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsGetByIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.viewsGetById(identifier);

        // TODO: test validations
    }
    
    /**
     * put a single view 
     *
     * put a single view 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewsPutTest() throws ApiException {
        String identifier = null;
        // Object response = api.viewsPut(identifier);

        // TODO: test validations
    }
    
    /**
     * Perform the specified action on the selected workflow 
     *
     * Perform the specified action on the selected workflow 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsActionTest() throws ApiException {
        String identifier = null;
        Action action = null;
        // Object response = api.workflowsAction(identifier, action);

        // TODO: test validations
    }
    
    /**
     * Delete the workflow with the specified ID 
     *
     * Delete the workflow with the specified ID 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsDeleteByInstanceIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.workflowsDeleteByInstanceId(identifier);

        // TODO: test validations
    }
    
    /**
     * Delete the graph with the specified injectable name 
     *
     * Delete the graph with the specified injectable name 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsDeleteGraphsByNameTest() throws ApiException {
        String injectableName = null;
        // Object response = api.workflowsDeleteGraphsByName(injectableName);

        // TODO: test validations
    }
    
    /**
     * Delete the task with the specified injectable name 
     *
     * Delete the task with the specified injectable name 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsDeleteTasksByNameTest() throws ApiException {
        String injectableName = null;
        // Object response = api.workflowsDeleteTasksByName(injectableName);

        // TODO: test validations
    }
    
    /**
     * Get list of active and past run workflow instances 
     *
     * Get list of active and past run workflow instances 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsGetTest() throws ApiException {
        Boolean active = null;
        // Object response = api.workflowsGet(active);

        // TODO: test validations
    }
    
    /**
     * Get list of tasks possible to run in workflows 
     *
     * Get list of tasks possible to run in workflows 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsGetAllTasksTest() throws ApiException {
        // Object response = api.workflowsGetAllTasks();

        // TODO: test validations
    }
    
    /**
     * get a specific workflow 
     *
     * get a specific workflow 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsGetByInstanceIdTest() throws ApiException {
        String identifier = null;
        // Object response = api.workflowsGetByInstanceId(identifier);

        // TODO: test validations
    }
    
    /**
     * Get list of all graphs 
     *
     * Get list of all graphs 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsGetGraphsTest() throws ApiException {
        // Object response = api.workflowsGetGraphs();

        // TODO: test validations
    }
    
    /**
     * Get the graph with the specified injectable name 
     *
     * Get the graph with the specified injectable name 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsGetGraphsByNameTest() throws ApiException {
        String injectableName = null;
        // Object response = api.workflowsGetGraphsByName(injectableName);

        // TODO: test validations
    }
    
    /**
     * Get the task with the specified injectable name 
     *
     * Get the task with the specified injectable name 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsGetTasksByNameTest() throws ApiException {
        String injectableName = null;
        // Object response = api.workflowsGetTasksByName(injectableName);

        // TODO: test validations
    }
    
    /**
     * Run a new workflow 
     *
     * Run a new workflow 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsPostTest() throws ApiException {
        GenericObj body = null;
        String name = null;
        // Object response = api.workflowsPost(body, name);

        // TODO: test validations
    }
    
    /**
     * Add a graph to the graph library 
     *
     * Add a graph to the graph library 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsPutGraphsTest() throws ApiException {
        GenericObj body = null;
        // Object response = api.workflowsPutGraphs(body);

        // TODO: test validations
    }
    
    /**
     * Add tasks to task library 
     *
     * Add tasks to task library 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsPutTaskTest() throws ApiException {
        GenericObj body = null;
        // Object response = api.workflowsPutTask(body);

        // TODO: test validations
    }
    
}
